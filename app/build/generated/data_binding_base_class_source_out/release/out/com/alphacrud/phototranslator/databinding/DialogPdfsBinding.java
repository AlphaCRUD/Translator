// Generated by view binder compiler. Do not edit!
package com.alphacrud.phototranslator.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.alphacrud.phototranslator.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogPdfsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout linear;

  @NonNull
  public final LinearLayout linearDoc;

  @NonNull
  public final LinearLayout linearMsg;

  @NonNull
  public final LinearLayout linearPDF;

  @NonNull
  public final LinearLayout lineartxt;

  @NonNull
  public final TextView txt;

  private DialogPdfsBinding(@NonNull RelativeLayout rootView, @NonNull LinearLayout linear,
      @NonNull LinearLayout linearDoc, @NonNull LinearLayout linearMsg,
      @NonNull LinearLayout linearPDF, @NonNull LinearLayout lineartxt, @NonNull TextView txt) {
    this.rootView = rootView;
    this.linear = linear;
    this.linearDoc = linearDoc;
    this.linearMsg = linearMsg;
    this.linearPDF = linearPDF;
    this.lineartxt = lineartxt;
    this.txt = txt;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogPdfsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogPdfsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_pdfs, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogPdfsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.linear;
      LinearLayout linear = ViewBindings.findChildViewById(rootView, id);
      if (linear == null) {
        break missingId;
      }

      id = R.id.linearDoc;
      LinearLayout linearDoc = ViewBindings.findChildViewById(rootView, id);
      if (linearDoc == null) {
        break missingId;
      }

      id = R.id.linearMsg;
      LinearLayout linearMsg = ViewBindings.findChildViewById(rootView, id);
      if (linearMsg == null) {
        break missingId;
      }

      id = R.id.linearPDF;
      LinearLayout linearPDF = ViewBindings.findChildViewById(rootView, id);
      if (linearPDF == null) {
        break missingId;
      }

      id = R.id.lineartxt;
      LinearLayout lineartxt = ViewBindings.findChildViewById(rootView, id);
      if (lineartxt == null) {
        break missingId;
      }

      id = R.id.txt;
      TextView txt = ViewBindings.findChildViewById(rootView, id);
      if (txt == null) {
        break missingId;
      }

      return new DialogPdfsBinding((RelativeLayout) rootView, linear, linearDoc, linearMsg,
          linearPDF, lineartxt, txt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
