// Generated by view binder compiler. Do not edit!
package com.alphacrud.phototranslator.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.airbnb.lottie.LottieAnimationView;
import com.alphacrud.phototranslator.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutShareBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LottieAnimationView animationView;

  @NonNull
  public final LottieAnimationView animationView2;

  @NonNull
  public final LinearLayout linear;

  @NonNull
  public final LinearLayout linearDoc;

  @NonNull
  public final LinearLayout linearsahre;

  private LayoutShareBinding(@NonNull LinearLayout rootView,
      @NonNull LottieAnimationView animationView, @NonNull LottieAnimationView animationView2,
      @NonNull LinearLayout linear, @NonNull LinearLayout linearDoc,
      @NonNull LinearLayout linearsahre) {
    this.rootView = rootView;
    this.animationView = animationView;
    this.animationView2 = animationView2;
    this.linear = linear;
    this.linearDoc = linearDoc;
    this.linearsahre = linearsahre;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutShareBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutShareBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_share, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutShareBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.animation_view;
      LottieAnimationView animationView = ViewBindings.findChildViewById(rootView, id);
      if (animationView == null) {
        break missingId;
      }

      id = R.id.animation_view2;
      LottieAnimationView animationView2 = ViewBindings.findChildViewById(rootView, id);
      if (animationView2 == null) {
        break missingId;
      }

      id = R.id.linear;
      LinearLayout linear = ViewBindings.findChildViewById(rootView, id);
      if (linear == null) {
        break missingId;
      }

      id = R.id.linearDoc;
      LinearLayout linearDoc = ViewBindings.findChildViewById(rootView, id);
      if (linearDoc == null) {
        break missingId;
      }

      id = R.id.linearsahre;
      LinearLayout linearsahre = ViewBindings.findChildViewById(rootView, id);
      if (linearsahre == null) {
        break missingId;
      }

      return new LayoutShareBinding((LinearLayout) rootView, animationView, animationView2, linear,
          linearDoc, linearsahre);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
